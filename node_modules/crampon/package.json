{
  "name": "crampon",
  "version": "0.2.2",
  "description": "Hierarchical configuration, made easy.",
  "keywords": [
    "config",
    "configuration",
    "environment",
    "hierarchy",
    "settings"
  ],
  "author": {
    "name": "Matt Dunlap",
    "email": "mpdunlap@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:Prestaul/crampon.git"
  },
  "readmeFilename": "README.md",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/*.test.js"
  },
  "dependencies": {
    "deap": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "~1.9.0",
    "chai": "~1.6.0"
  },
  "readme": "crampon\n=======\n\nHierarchical configuration, made easy.\n\n\nBasic Usage (No Hierarchy)\n--------------------------\nIn it's most basic usage, you can add configuration objects to a crampon instance and then access that configuration:\n```js\nvar Crampon = require('crampon'),\n    crampon = new Crampon().add({\n        root: '/home/apps/ftknox'\n    });\n\nvar config = crampon.getConfig();\n```\n\n\n### Adding Data\nData can be added using the `add` and `addFile` methods. New data is merged with old data and if there are conflicts then new values will take precedence:\n```js\nvar crampon = new Crampon().add({\n        root: '/home/apps/ftknox',\n        db: {\n            name: 'ftknox',\n            pwd: '1234'\n        }\n    })\n    .addFile('./conf'); // could be conf.js or conf.json if extension is not specified\n\n// conf.js: module.exports = { db: { pwd:'abcd' } };\n\nassert.deepEqual(crampon.getConfig(), {\n    root: '/home/apps/ftknox',\n    db: {\n        name: 'ftknox',\n        pwd: 'abcd'\n    }\n});\n```\n\n\nHierarchical Configuration\n--------------------------\nHierarchical configuration can be used to setup environment specific configuration with the ability to inherit and override configuration for each environment:\n```js\n// Set the hierarchy when constructing an instance of crampon\nvar crampon = new Crampon(['prod', 'test', 'dev']).add({\n    prod: {\n        root: '/home/apps/ftknox',\n        db: {\n            name: 'ftknox',\n            pwd: '1234'\n        },\n        debugLevel: 3\n    },\n    stage: {\n        debugLevel: 2\n    },\n    dev: {\n        db: {\n            name: 'ftknox_dev'\n        },\n        debugLevel: 1\n    }\n});\n\n// Get the dev configuration\nvar config = crampon.getConfig('dev');\n\nassert.deepEqual(config, {\n    root: '/home/apps/ftknox',\n    db: {\n        name: 'ftknox_dev',\n        pwd: '1234'\n    },\n    debugLevel: 3\n});\n```\n\n### Overrides\nWhen using a hierarchical configuration, data added via `add` and `addFile` must have environment keys at the root.\nIn order to override environment specific configuration with configuration that applies in all cases you can use `addOverride` and `addOverrideFile`.\n\nContinuing the above example, you could override the debugLevel in your dev environment in this way:\n```js\ncrampon.addOverride({\n    debugLevel: 1\n});\n\n// Get the configuration\nvar config = crampon.getConfig('dev');\n\n// debugLevel is now 1 in all environments\nassert.deepEqual(config, {\n    root: '/home/apps/ftknox',\n    db: {\n        name: 'ftknox_dev',\n        pwd: '1234'\n    },\n    debugLevel: 1\n});\n```\n\n### Arrays\nAs of version 0.2, arrays in configuration are replaced, rather than merged.\n\n```js\nvar crampon = new Crampon().add({\n        favoriteColor: 'pink',\n        otherColors: [\n            'blue',\n            'red'\n        ]\n    })\n    .add({\n        otherColors: [\n            'green',\n            'black'\n        ]\n    });\n\nassert.deepEqual(crampon.getConfig(), {\n    favoriteColor: 'pink',\n    otherColors: [\n        'green',\n        'black'\n    ]\n});\n```\n",
  "bugs": {
    "url": "https://github.com/Prestaul/crampon/issues"
  },
  "homepage": "https://github.com/Prestaul/crampon",
  "_id": "crampon@0.2.2",
  "dist": {
    "shasum": "d297e1f5685251d284871bccd581206ea7afeaf9"
  },
  "_from": "crampon@",
  "_resolved": "https://registry.npmjs.org/crampon/-/crampon-0.2.2.tgz"
}
