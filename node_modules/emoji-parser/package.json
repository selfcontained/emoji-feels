{
  "name": "emoji-parser",
  "license": "MIT",
  "description": "Emoji Parser for node.js based on www.Emoji-Cheat-Sheet.com",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/frissdiegurke/emoji-parser"
  },
  "main": "app.js",
  "keywords": [
    "emoji",
    "parser",
    "smileys"
  ],
  "author": {
    "name": "FrissDieGurke",
    "email": "frissdiegurke@hotmail.com",
    "url": "https://github.com/frissdiegurke/"
  },
  "dependencies": {
    "wrench": "~1.5.8"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-coffee": "0.0.6",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-contrib-copy": "~0.4.1"
  },
  "readme": "# emoji-parser for node.js and bower\n\n## About\n\n### Server-Side (node.js)\n\nThis script makes it easy to keep the emoji-images in sync with the [official repository](https://github.com/arvida/emoji-cheat-sheet.com) of [emoji-cheat-sheet.com](http://www.emoji-cheat-sheet.com/).\nIt's just an additional call on server-startup (or whenever you want to synchronize).\n\nThe actual parsing works without any DOM-manipulation or whatever, just a simple replace call.\n\n### Client-Side (bower)\n\nThe actual bower-component is located within the [emoji-parser-bower](https://github.com/frissdiegurke/emoji-parser-bower) repository, but it gets generated by grunt using only files within this repository.\n\nOn client-side you may use this script to easily parse the emoji (like server-side) without any DOM-manipulation.\n\nWhen used client-side this module of cause cannot ensure that you're using the latest emoji images but I'll try to keep it up-to-date :wink:.\n\n## Why another one?\n\nThis project is inspired by [emoji-images](https://github.com/HenrikJoreteg/emoji-images), but this project hasn't been modified for some time now and the author isn't responding to issues.\n\nBecause of this and a few more customizations I rewrote this in coffee-script which is much more fun to code :smile:.\n\nSo this has become way more customizable (up to passing own parser-function) and the emoji-synchronization happens server-side instead of project-side.\n\n## Usage\n\n### API\n\n#### node.js (server-side)\n\n`var emojiParser = require('emoji-parser');`\n\n * `emojiParser.init([directory])` initializes the module.\n   + `directory` (default: `module-path + '/emoji'`) - The file-system path of the directory where to store the images (without trailing `/`).\n\n * `emojiParser.update([remain], [token], [callback])` downloads missing emoji images to keep your images up-to-date.\n   + `remain` (default: `true`) - If false the directory gets cleared before downloading all images. Otherwise only images get loaded that don't already exist.\n   + `token` (default: null) - If set it will get used as GitHub access_token.\n   + `callback` (default: `null`) - Function that gets called after update is complete.\n\n * `[String] emojiParser.parse(text, url, [options])` replaces all emoji-occurrences within given text.\n   + `text` - The text to parse.\n   + `url` - The base-url where the clients find the images (without trailing `/`).\n   + `options` (default: `{}`) - The options to use for parsing:\n     * `list`: A list of emoji to overwrite default one.\n     * `parser`: A Parser ([see below](#parser)) to replace the default parser.\n     * `classes`: A String of the content for the `class`-attribute of the `img`-tag (default parser).\n     * `attributes` (default: `{'title':function(match,name,parameter){if (parameter != null) return parameter + \" (\" + name + \")\"; else return name;}, 'alt':function(match){return match;}}`): An object of attributes and their value-producing function (gets passed matching string, emoji-name and parameter (if any): `\":smiley[parameter]:\", \"smiley\", \"parameter\"`). The attributes get added to the `img`-tag with the generated values (default parser).\n   + Returns the text with parsed emoji.\n\n * `[String] emojiParser.parse(text, url, parser)` replaces all emoji-occurrences within given text, using given parser.\n   + `text` - The text to parse.\n   + `url` - The base-URL to pass to the parser (without trailing `/`).\n   + `parser` - The Parser ([see below](#parser)) to use.\n   + Returns the text with parsed emoji.\n\n * `[Array of Strings] emojiParser.list([newList])` - Getter and/or Setter for the list of available images.\n   + `newList` (default: `null`) - The list to use for parsing, gets ignored if `null`.\n   + Returns the list of emoji that get used for parsing (not sorted).\n\n * `[Array of Strings] emojiParser.emoji` - The list of images that have been found on file-system or got downloaded by `emojiParser.update(...)`.\n\n#### bower (client-side)\n\nIf you use `require.js` or similar frameworks you can use it to get the module, otherwise you can use `window.emojiParser`.\n\n * `[String] emojiParser(text, url, [options])` replaces all emoji-occurrences within given text.\n   + `text` - The text to parse.\n   + `url` - The base-url where the clients find the images (without trailing `/`).\n   + `options` (default: `{}`) - The options to use for parsing:\n     * `list`: A list of emoji to overwrite default one.\n     * `parser`: A Parser ([see below](#parser)) to replace the default parser.\n     * `classes`: A String of the content for the `class`-attribute of the `img`-tag (default parser).\n     * `attributes` (default: `{'title':function(match,name,parameter){if (parameter != null) return parameter + \" (\" + name + \")\"; else return name;}, 'alt':function(match){return match;}}`): An object of attributes and their value-producing function (gets passed matching string, emoji-name and parameter (if any): `\":smiley[parameter]:\", \"smiley\", \"parameter\"`). The attributes get added to the `img`-tag with the generated values (default parser).\n\n * `[String] emojiParser(text, url, parser)` replaces all emoji-occurrences within given text, using given parser.\n   + `text` - The text to parse.\n   + `url` - The base-URL to pass to the parser (without trailing `/`).\n   + `parser` - The Parser ([see below](#parser)) to use.\n   + Returns the text with parsed emoji.\n\n * `[Array of Strings] emojiParser.list([newList])` - Getter and/or Setter for the list of available images.\n   + `newList` (default: `null`) - The list to use for parsing, gets ignored if `null`.\n   + Returns the list of emoji that get used for parsing (not sorted).\n\n#### Parser\n\nA parser is just a function that gets called for each emoji-occurrence with the following parameters:\n\n 1. `[Array] match` - An array containing the string that gets interpreted as emoji, the name of the emoji and the parameter for the emoji (if any)\n 2. `[String] url` - The base-URL that got passed to `emojiParser.parse`-function.\n 3. `[String] classes` - The classes the `img`-tag should use.\n 4. `[Object] options` - The options that get used by the `emojiParser.parse`-function.\n\nThe return-value will replace the emoji-occurrence.\n\n### Example\n\n#### node.js\n\n    var emoji = require('emoji-parser');\n    \n    // keep emoji-images in sync with the official repository\n    emoji.init().update();\n    \n    // calls to http://example.com/emoji/images/*.png should resolve to path/to/node_modules/emoji-parser/emoji/*.png\n    emoji.parse('This is a :telephone: :smiley[:D]:', 'http://example.com/emoji/images');\n    // This is a <img class='emoji' src='http://example.com/emoji/images/telephone.png' title='telephone' alt=':telephone:' /> <img class='emoji' src='http://example.com/emoji/images/smiley.png' title=':D (smiley)' alt=':smiley[:D]:' />\n\n#### bower\n\n    var emoji = require ? require('emoji-parser') : window.emojiParser;\n    \n    emoji('This is a :telephone: :smiley[:D]:', 'http://example.com/emoji/images');\n    // This is a <img class='emoji' src='http://example.com/emoji/images/telephone.png' title='telephone' alt=':telephone:' /> <img class='emoji' src='http://example.com/emoji/images/smiley.png' title=':D (smiley)' alt=':smiley[:D]:' />\n\n## Installation\n\n### node.js\n\n`npm install emoji-parser`\n\n### bower\n\n`bower install emoji-parser`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/frissdiegurke/emoji-parser/issues"
  },
  "homepage": "https://github.com/frissdiegurke/emoji-parser",
  "_id": "emoji-parser@0.1.1",
  "dist": {
    "shasum": "d82c601564f61531a61ad09ebcb4d20533cf1683"
  },
  "_from": "emoji-parser@",
  "_resolved": "https://registry.npmjs.org/emoji-parser/-/emoji-parser-0.1.1.tgz"
}
